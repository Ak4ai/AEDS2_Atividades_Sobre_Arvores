#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <fstream>
#include <termios.h>
#include <unistd.h>
#include <chrono>

using namespace std;
using namespace std::chrono;


struct Node {
    string word;
    string meaning;
    Node* left;
    Node* right;

    Node(const string& w, const string& m) : word(w), meaning(m), left(nullptr), right(nullptr) {}
};

// Funções para árvore BST
Node* insertBST(Node* node, const string& word, const string& meaning) {
    if (!node) return new Node(word, meaning);
    if (word < node->word) {
        node->left = insertBST(node->left, word, meaning);
    } else if (word > node->word) {
        node->right = insertBST(node->right, word, meaning);
    }
    return node;
}

bool searchBST(Node* root, const string& word, string& meaning) {
    if (!root) return false;
    if (word < root->word) return searchBST(root->left, word, meaning);
    if (word > root->word) return searchBST(root->right, word, meaning);
    meaning = root->meaning;
    return true;
}

void autocompleteHelperBST(Node* node, const string& prefix, vector<string>& results) {
    if (!node) return;
    if (node->word.find(prefix) == 0) results.push_back(node->word);
    if (prefix <= node->word) autocompleteHelperBST(node->left, prefix, results);
    if (prefix >= node->word) autocompleteHelperBST(node->right, prefix, results);
}

vector<string> autocompleteBST(Node* root, const string& prefix) {
    vector<string> results;
    autocompleteHelperBST(root, prefix, results);
    return results;
}

struct AVLNode {
    string word;
    string meaning;
    AVLNode* left;
    AVLNode* right;
    int height;
    
    AVLNode(const string& w, const string& m) : word(w), meaning(m), left(nullptr), right(nullptr), height(1) {}
};

AVLNode* insert(AVLNode* node, const string& word, const string& meaning);
bool search(AVLNode* root, const string& word, string& meaning);

int height(AVLNode* node) {
    return node ? node->height : 0;
}

int balanceFactor(AVLNode* node) {
    return node ? height(node->left) - height(node->right) : 0;
}

void updateHeight(AVLNode* node) {
    if (node) {
        node->height = 1 + max(height(node->left), height(node->right));
    }
}

AVLNode* rotateRight(AVLNode* y) {
    AVLNode* x = y->left;
    AVLNode* T2 = x->right;
    x->right = y;
    y->left = T2;
    updateHeight(y);
    updateHeight(x);
    return x;
}

AVLNode* rotateLeft(AVLNode* x) {
    AVLNode* y = x->right;
    AVLNode* T2 = y->left;
    y->left = x;
    x->right = T2;
    updateHeight(x);
    updateHeight(y);
    return y;
}

AVLNode* balance(AVLNode* node) {
    updateHeight(node);
    int bf = balanceFactor(node);
    if (bf > 1) {
        if (balanceFactor(node->left) < 0) {
            node->left = rotateLeft(node->left);
        }
        return rotateRight(node);
    }
    if (bf < -1) {
        if (balanceFactor(node->right) > 0) {
            node->right = rotateRight(node->right);
        }
        return rotateLeft(node);
    }
    return node;
}

AVLNode* insertAVL(AVLNode* node, const string& word) {
    if (!node) return new AVLNode(word, ""); // Provide a default meaning
    if (word < node->word) {
        node->left = insertAVL(node->left, word);
    } else if (word > node->word) {
        node->right = insertAVL(node->right, word);
    } else {
        return node; // Duplicate words are not allowed
    }
    return balance(node);
}

AVLNode* insert(AVLNode* node, const string& word, const string& meaning) {
    if (!node) return new AVLNode(word, meaning);
    if (word < node->word) {
        node->left = insert(node->left, word, meaning);
    } else if (word > node->word) {
        node->right = insert(node->right, word, meaning);
    } else {
        // Palavra já existe, não faz nada
        return node;
    }
    // Atualizar altura e balancear a árvore
    updateHeight(node);
    return balance(node);
}

void autocompleteHelper(AVLNode* node, const string& prefix, vector<string>& results) {
    if (!node) return;
    if (node->word.find(prefix) == 0) {
        results.push_back(node->word);
    }
    if (prefix <= node->word) {
        autocompleteHelper(node->left, prefix, results);
    }
    if (prefix >= node->word) {
        autocompleteHelper(node->right, prefix, results);
    }
}

vector<string> autocomplete(AVLNode* root, const string& prefix) {
    vector<string> results;
    autocompleteHelper(root, prefix, results);
    return results;
}

bool search(AVLNode* root, const string& word) {
    if (!root) return false;
    if (word == root->word) return true;
    if (word < root->word) return search(root->left, word);
    return search(root->right, word);
}

bool search(AVLNode* root, const string& word, string& meaning) {
    if (root == nullptr) {
        return false;
    }
    if (word < root->word) {
        return search(root->left, word, meaning);
    } else if (word > root->word) {
        return search(root->right, word, meaning);
    } else {
        meaning = root->meaning;
        return true;
    }
}

void printSuggestions(const vector<string>& suggestions, const string& prefix) {
    cout << "\033[2J\033[1;1H"; // Clear the console
    cout << "Digite as primeiras letras da palavra para sugestões (aperte 'ESC' para sair):" << endl;
    cout << "Prefixo atual: " << prefix << endl;
    cout << "Sugestões:" << endl;
    for (const string& suggestion : suggestions) {
        cout << suggestion << endl;
    }
}

void setTerminalMode(bool enable) {
    static struct termios oldt, newt;
    if (enable) {
        tcgetattr(STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~(ICANON | ECHO);
        tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    } else {
        tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    }
}

// Função main atualizada
int main() {
    AVLNode* avlRoot = nullptr;
    Node* bstRoot = nullptr;

    cout << "Escolha a árvore para operar:\n1. AVL\n2. BST\nEscolha: ";
    int choice;
    cin >> choice;
    cin.ignore(); // Limpa o buffer do cin

    ifstream file("dicionario.txt");
    string line;

    if (file.is_open()) {
        while (getline(file, line)) {
            size_t delimiterPos = line.find(':');
            if (delimiterPos != string::npos) {
                string word = line.substr(0, delimiterPos);
                string meaning = line.substr(delimiterPos + 1);

                if (choice == 1) {
                    avlRoot = insert(avlRoot, word, meaning);
                } else {
                    bstRoot = insertBST(bstRoot, word, meaning);
                }
            }
        }
        file.close();
    }

    string prefix;
    printSuggestions({}, prefix);

    setTerminalMode(true);

    vector<string> suggestions;

    while (true) {
        char ch;
        read(STDIN_FILENO, &ch, 1); // Lê um caractere sem Enter
        if (ch == 27) { // Tecla ESC para sair
            break;
        } else if (ch == 127) { // Backspace
            if (!prefix.empty()) prefix.pop_back();
        } else if (ch == 10) { // Enter
            setTerminalMode(false);
            cout << "\n\n" << prefix << endl;

            auto start = high_resolution_clock::now();
            string meaning;
            bool found;
            if (choice == 1) {
                found = search(avlRoot, prefix, meaning);
            } else {
                found = searchBST(bstRoot, prefix, meaning);
            }
            auto end = high_resolution_clock::now();
            auto duration = duration_cast<microseconds>(end - start).count();

            if (found) {
                cout << "Palavra encontrada." << endl;
                cout << "Significado: " << meaning << endl;
            } else {
                cout << "Palavra não encontrada." << endl;
            }
            cout << "Tempo de busca: " << duration << " microsegundos" << endl;

            break;
        } else if (isprint(ch)) {
            prefix += ch;
        }

        if (choice == 1) {
            suggestions = autocomplete(avlRoot, prefix);
        } else {
            suggestions = autocompleteBST(bstRoot, prefix);
        }
        printSuggestions(suggestions, prefix);
    }

    setTerminalMode(false);

    return 0;
}
